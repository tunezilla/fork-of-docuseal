# frozen_string_literal: true

module Docuseal
  URL_CACHE = ActiveSupport::Cache::MemoryStore.new
  PRODUCT_URL = ENV.fetch('PRODUCT_URL', 'https://www.docuseal.com')
  PRODUCT_EMAIL_URL = ENV.fetch('PRODUCT_EMAIL_URL', PRODUCT_URL)
  NEWSLETTER_URL = "#{PRODUCT_URL}/newsletters".freeze
  ENQUIRIES_URL = "#{PRODUCT_URL}/enquiries".freeze
  PRODUCT_NAME = ENV.fetch('PRODUCT_NAME', 'DocuSeal')
  DEFAULT_APP_URL = ENV.fetch('APP_URL', 'http://localhost:3000')
  GITHUB_URL = 'https://github.com/docusealco/docuseal'
  DISCORD_URL = 'https://discord.gg/qygYCDGck9'
  TWITTER_URL = 'https://twitter.com/docusealco'
  TWITTER_HANDLE = '@docusealco'
  CHATGPT_URL = 'https://chatgpt.com/g/g-9hg8AAw0r-docuseal'
  SUPPORT_EMAIL = ENV.fetch('SUPPORT_EMAIL', 'support@docuseal.com')
  HOST = ENV.fetch('HOST', 'localhost')
  AATL_CERT_NAME = 'docuseal_aatl'
  DEFAULT_CERT_NAME = ENV.fetch('DEFAULT_CERT_NAME', 'DocuSeal Self-Host Autogenerated')
  WEBHOOK_USER_AGENT = ENV.fetch('WEBHOOK_USER_AGENT', 'DocuSeal.co Webhook')
  DEFAULT_EMAIL_FROM = ENV.fetch('DEFAULT_EMAIL_FROM', 'DocuSeal <info@docuseal.co>')
  DEFAULT_PAGE_TITLE = ENV.fetch('DEFAULT_PAGE_TITLE', 'DocuSeal | Open Source Document Signing')
  DEFAULT_META_TITLE = ENV.fetch('DEFAULT_META_TITLE', 'DocuSeal | Open Source Document Filling and Signing')
  DEFAULT_META_DESC = ENV.fetch('DEFAULT_META_DESC', 'Open source, self-hosted tool to streamline document filling and signing. Create custom PDF forms to complete and sign with an easy to use online tool.')
  DEFAULT_SIGN_REASON = ENV.fetch('DEFAULT_SIGN_REASON', 'Signed with DocuSeal.co')
  DEFAULT_SIGN_REASON_NAME = ENV.fetch('DEFAULT_SIGN_REASON_NAME', 'Signed by %<name>s with DocuSeal.co')
  ACROFORM_SIGNATURE_FIELDS_REQUIRED = ENV['ACROFORM_SIGNATURE_FIELDS_REQUIRED'] == 'true'
  SHOW_GITHUB_BADGE = ENV['SHOW_GITHUB_BADGE'] != 'false'
  SHOW_UPGRADE_BADGE = ENV['SHOW_UPGRADE_BADGE'] != 'false'
  SHOW_ATTRIBUTION = ENV['SHOW_ATTRIBUTION'] != 'false'
  SHOW_LANDING_PAGE = ENV['SHOW_LANDING_PAGE'] != 'false'
  SHOW_LOGO = ENV['SHOW_LOGO'] != 'false'
  CONSOLE_URL = if Rails.env.development?
                  'http://console.localhost.io:3001'
                elsif ENV['MULTITENANT'] == 'true'
                  "https://console.#{HOST}"
                else
                  ENV.fetch('CONSOLE_URL', 'https://console.docuseal.com')
                end
  CLOUD_URL = if Rails.env.development?
                'http://localhost:3000'
              else
                ENV.fetch('CLOUD_URL', 'https://docuseal.com')
              end
  CDN_URL = if Rails.env.development?
              'http://localhost:3000'
            elsif ENV['MULTITENANT'] == 'true'
              "https://cdn.#{HOST}"
            else
              ENV.fetch('CDN_URL', 'https://cdn.docuseal.com')
            end

  CERTS = JSON.parse(ENV.fetch('CERTS', '{}'))
  TIMESERVER_URL = ENV.fetch('TIMESERVER_URL', nil)
  VERSION_FILE_PATH = Rails.root.join('.version')

  DEFAULT_URL_OPTIONS = {
    host: HOST,
    protocol: ENV['FORCE_SSL'].present? ? 'https' : 'http'
  }.freeze

  module_function

  def version
    @version ||= VERSION_FILE_PATH.read.strip if VERSION_FILE_PATH.exist?
  end

  def multitenant?
    ENV['MULTITENANT'] == 'true'
  end

  def demo?
    ENV['DEMO'] == 'true'
  end

  def active_storage_public?
    ENV['ACTIVE_STORAGE_PUBLIC'] == 'true'
  end

  def default_pkcs
    return if Docuseal::CERTS['enabled'] == false

    @default_pkcs ||= GenerateCertificate.load_pkcs(Docuseal::CERTS)
  end

  def trusted_certs
    @trusted_certs ||=
      ENV['TRUSTED_CERTS'].to_s.gsub('\\n', "\n").split("\n\n").map do |base64|
        OpenSSL::X509::Certificate.new(base64)
      end
  end

  def default_url_options
    return DEFAULT_URL_OPTIONS if multitenant?

    @default_url_options ||= begin
      value = EncryptedConfig.find_by(key: EncryptedConfig::APP_URL_KEY)&.value if ENV['APP_URL'].blank?
      value ||= DEFAULT_APP_URL
      url = Addressable::URI.parse(value)
      { host: url.host, port: url.port, protocol: url.scheme }
    end
  end

  def product_name
    PRODUCT_NAME
  end

  def refresh_default_url_options!
    @default_url_options = nil
  end
end
